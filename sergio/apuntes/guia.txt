Crear el usuario de la base de datos:
sudo -u postgres createuser -P examen

Crear la base de datos:
sudo -u postgres createdb -O examen examen


EMPEZAR CLONANDO UN REPOSITORIO

gh repo clone schuman94/nombreProyecto
cd nombreProyecto
composer install
npm install
Cambiar o crear el .env
Crear usuario y base de datos si no existen
php artisan migrate:fresh
php artisan key:generate
composer run dev

COMENZANDO A PROGRAMAR

Creamos un modelo desde la consola:
php artisan make:model -a Empleado

Editamos el archivo en database/migrations para que se cree la tabla empleados:
public function up(): void
{
	Schema::create('empleados', function (Blueprint $table) {
		$table->id();
        $table->string('nombre);
        $table->uuid('codigo')->unique();
        $table->integer('cantidad')->default(1);
		$table->decimal('precio', 8, 2);
		$table->foreignId('departamento_id)->constrained();
        $table->timestamp('fecha_hora')->nullable();
        $table->unique(['departamento_id', 'fecha_hora']);
		$table->index('departamento_id');  (Facilita un: select * from empleado where departamento_id = X;)
    }
}

Ejecutamos la migracion:
php artisan migrate
(Si quisieramos dar marcha atras: php artisan migrate:rollback)

Podemos insertar filas en la tabla desde la consola: php artisan db
INSERT INTO empleados (columna1, columna2, columna3, ...)
VALUES
(value1, value2, value3, ...),
(value1, value2, value3, ...),
(value1, value2, value3, ...);

Creamos la ruta en routes/web.php:
Route::resource('empleados', EmpleadoController::class);

En app/Http/Controllers/EmpleadoController.php añadimos la vistas para el CRUD de empleados

Ahora debemos irnos a resources/views y crear una carpeta para cada modelo, debe llamarse igual que la tabla (minuscula y plural).
Dentro de cada carpeta creamos los index.blade.php, create, store, show, edit, update y destroy correspondientes a las funciones creadas en el controlador.
En cada uno de estos ficheros blade.php todo el código va dentro de un <x-app-layout> o <x-guest-layout>

Ahora tenemos que editar la clase del modelo en app/Models/Empleado.php
Creamos las funciones que relacionen modelos (tablas). Por ejemplo:
    public function departamento()
    {
        return $this->belongsTo(Departamento::class);
    }

    public function empleados() {
        return $this->hasMany(Empleado::class);
    }

Automaticamente se crea una propiedad que se llama igual pero sin los parentesis () y que devuelve un objeto o una coleccion. Por ejemplo:
    Empleado->departamento
    Departamento->empleados

Si en vez de la propiedad usamos el metodo, por ejemplo Empleado->departamento(), devuelve un querybuilder al que puedes continuar con un where() o lo que sea.


Reglas en las relaciones:
En las relaciones 1 a 1, y 1 a muchos, el belongsTo hay que ponerselo al que tenga la foreignId en la tabla.

TABLA PIVOTE: En las relaciones muchos a muchos, se requiere de una tabla intermedia.
La tabla por  convenio se llama como las dos tablas ordenadas alfabeticamente y con un _ en medio.
Ejemplo: user_videojuego

php artisan make:migration create_user_videojuego_table

Schema::create('user_videojuego', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained();
            $table->foreignId('videojuego_id')->constrained();
            $table->primary(['user_id', 'videojuego_id']);
            $table->integer('cantidad')->default(1);
            $table->timestamps();
});

Ahora nos vamos a los modelos User y Videojuego y le creamos a ambos la funcion correspondiente con belongsToMany indicandole también si hay alguna columna extra:
En el modelo Videojuego:
    public function users() {
            return $this->belongsToMany(User::class)->withPivot('cantidad');
    }
En el modelo User:
    public function videojuegos() {
            return $this->belongsToMany(Videojuego::class)->withPivot('cantidad');
    }


Para acceder a la columna pivote hay que pasar de una tabla a otra y luego a la pivote:
foreach ($user->videojuegos as $videojuego)
    {{ $videojuego->pivot->cantidad }}

En el modelo Factura hay una funcion calcular_precio() más elaborada que trabaja con las tablas articulo y articulo_factura

En las rutas, podemos meter el controlador de factura dentro del grupo que lleva el middleware de auth para que solo puedan acceder los logeados.
Además, en el controlador de factura podriamos hacer que solo se obtengan en el index las facturas de user logeado:
    public function index()
    {
        return view('facturas.index', [
            'facturas' => Factura::where('user_id', Auth::id())->get(),
        ]);
    }

Para usar el Auth::id() es necesario cargar: use Illuminate\Support\Facades\Auth;
En el show podriamos hacer que solo entre quien es usuario de esa factura concreta y si no, que le salga un 404:
    public function show(Factura $factura)
    {
        // Verificar si el usuario autenticado es el propietario de la factura
        if ($factura->user_id !== Auth::id()) {
            abort(404);
        }

        return view('facturas.show', [
            'factura' => $factura,
        ]);
    }

Para crear una ruta diferente:
Route::put('prestamos/devolver/{prestamo}', [PrestamoController::class, 'devolver'])->name('prestamos.devolver');
Route::put('videojuegos/adquirir/{videojuego}', [VideojuegoController::class, 'adquirir'])->name('videojuegos.adquirir');
Route::get('alumnos/criterios/{alumno}', [AlumnoController::class, 'criterios'])->name('alumnos.criterios');
Además, hay que crear la funcion en el controlador, y un archivo de vista en el caso de alumnos




Para un modelo cuyo PLURAL no es regular:
En la consola: php artisan make:model Proyeccion
Corregir con el plural el nombre del archivo de migracion database/migrations/2024_12_08_104912_create_proyecciones_table.php
Dentro de ese archivo cambiar el nombre de la tabla proyeccions por proyecciones en up() y down()
En web.php añadir la ruta para proyecciones indicandolo en parameters:
    Route::resource('proyecciones', ProyeccionController::class)->parameters([
        'proyecciones' => 'proyeccion',
    ]);;
En el controlador escribir 'proyecciones'
En el modelo especificar el nombre de la tabla:
     protected $table = 'proyecciones';
Si proyeccion_id fuese clave foranea de otra tabla, habria que indicarlo explícitamente la migracion de dicha tabla:
    $table->foreignId('proyeccion_id')->constrained('proyecciones');



Cuando cuando la clave primaria de la tabla no se llama tablasingular_id:
En el modelo hay que indicar como se llama la clave foranea de la otra tabla con la que se relaciona:
    public function notas() {
        return $this->hasMany(Nota::class, 'ccee_id');
    }

En otros modelos que se relacionen con el anterior, si tambien hay que crear una funcion de relacion como hasMany, hay que indicar no solo Modelo::class, sino tambien la columna con la clave:
    public function ce() {
            return $this->belongsTo(Ce::class, 'ccee_id');
    }


CREAR FUNCIONES GENERICAS:
Creamos un fichero helpers.php en app/ y añadimos nuestras funciones personalizadas como dinero() y fecha().
En el composer.json debemos incluir en el autoload esto: "files": ["app/helpers.php"]
Hacemos un composer dump-autoload para cargarlo.

VALIDATE EN EL CONTROLADOR

public function store(Request $request)
    {
        $validated = $request->validate([
            'codigo' => 'required|string|unique:articulos,codigo',       // valor unico en su propia tabla y columna
            'descripcion' => 'nullable|string|max:255',
            'precio' => 'required|numeric|min:0|max:999999.99',         // esto equivale en la migracion a un: decimal('precio', 8, 2)
            'categoria_id' => 'required|integer|exists:categorias,id',   // debe existir en la columna 'id' de la tabla 'categorias'
            'fecha' => 'required|date|date_format:Y-m-d',
            'fecha_hora' => 'required|date|date_format:Y-m-d H:i:s'
        ]);

        $articulo = Articulo::create($validated);
        session()->flash('exito', 'Artículo creado correctamente.');
        return redirect()->route('articulos.show', $articulo);
    }



public function update(Request $request, articulo $articulo)
    {
        $validated = $request->validate([
            'codigo' => [
                'required',
                'string',
                Rule::unique('articulos')->ignore($articulo),           // Verifica que sea único en la tabla 'articulos' ignorando su propio codigo
            ],
            'descripcion' => 'string|max:255|nullable',
            'precio' => 'required|numeric|min:0|max:999999.99',
            'categoria_id' => 'required|integer|exists:categorias,id',
            'fecha' => 'required|date|date_format:Y-m-d',
            'fecha_hora' => 'required|date|date_format:Y-m-d H:i:s'
        ]);

        $articulo->fill($validated);
        $articulo->save();
        session()->flash('exito', 'Artículo modificado correctamente.');
        return redirect()->route('articulo.index');
    }


Es importante que en el modelo incluyamos estos dos codigos:

protected $fillable = ['codigo', 'descripcion', 'precio', 'categoria_id', 'fecha', 'fecha_hora'];

protected $casts = [
    'fecha' => 'datetime',
    'fecha_hora' => 'datetime',
];

Para crear un uuid:
numero = (string) Str::uuid()


ENERO 2025

----------------RELACIONES POLIMORFICAS: UNO A MUCHOS-------------------------------------------------

Ejemplo:
Un dispositivo puede pertenecer a un ordenador o a un aula.
El dispositivo es quien tiene la clave ajena que puede apuntar a un ordenador o un aula.
Un ordenador puede tener muchos dispositivos y un aula puede tener muchos dispositivos.
Consideramos tanto al ordenador como al aula con un nombre que nos inventamos. Por ejemplo, "colocable".
De forma que un dispositivo pertenece a un colocable. Y un colocable puede tener muchos dispositivos.
Nos encontramos ante una relación de 1 a muchos pero polimorfica.

Primero es necesario crear las migraciones de los dos tipos de colocables: aula y ordenador. Se crean como siempre, no hay nada nuevo.
Luego creamos la migración de dispositivos, en donde se añade:
    $table->morphs('colocable');
Esto crea dos columnas en la tabla: colocable_id y colocable_type

Para cada fila:
colocable_type contiene la clase a la que pertenece el colocable: App\Models\Ordenador o App\Models\Aula
colocable_id contiene la clave ajena, es decir, el id de la tabla ordenadores o aulas.

En la clase Dispositivo hay que añadir el método equivalente al belongsTo:
    public function colocable() {
        return $this->morphTo();
    }

En las clases Aula y Ordenador hay que añadir el método equivalente al hasMany:
    public function dispositivos() {
        return $this->morphMany(Dispositivo::class, 'colocable');
    }

En el store y el update del controlador de Dispositivo será necesario implementar la creación o modificación de las columnas colocable_id y colocable_type
(Ver ejemplo en el proyecto schuman94/ordenadores)

El que contiene la clave ajena (o contiene morphs() en la migracion) es quien tiene que utilizar morphsTo en el modelo.
Y tambien es quien en el controlador tiene que hacer: $x->nosekeable()->associate(fesffsdf);


-----------------RELACIONES POLIMORFICAS UNO A UNO-------------------------------------

Suponiendo que un colocable solo puede tener un dispositivo...
Es igual que la uno a muchos, pero en los "colocables" hay que añadir el método:

    public function dispositivos() {
        return $this->morphOne(Dispositivo::class, 'colocable');
    }


----------------RELACIONES POLIMORFICAS MUCHOS A MUCHOS---------------------------------

Supongiendo que posts y videos pueden tener tags...

Aquí hay que crear una tabla intermedia llamada taggables: php artisan make:migration taggables
En esa tabla hay que incluir un foreignId de tags y el morphs():
    $table->foreignId('tag_id')->constrained();
    $table->morphs('taggable');

Dentro del modelo Post o Video, el metodo tags() usa morphToMany:
    public function tags()
    {
        return $this->morphToMany(Tag::class, 'taggable');
    }

Dentro del modelo Tag no tenemos un metodo taggeable que devuelva todo, sino un método para cada tipo de taggeable:
    public function posts()
    {
        return $this->morphedByMany(Post::class, 'taggable');
    }

    public function videos()
    {
        return $this->morphedByMany(Video::class, 'taggable');
    }



----------------FACTORIES Y SEEDERS ----------------------------------------------------

En DispositivoFactory.php creamos la factoria usando fake. Ejemplo:

return [
    'codigo' => fake()->unique()->bothify('DISP-??-####'),
    'nombre' => fake()->word(),
    'colocable_id' => rand(1, 5),
    'colocable_type' => fake()->randomElement([
        'App\Models\Ordenador',
        'App\Models\Aula'
    ]),
];

Para obtener un id aleatorio disponiblede una clave ajena podemos usar Aula::all()->shuffle()->first()->id,(en el caso de colocable no porque colocable no es un modelo)

Luego nos vamos a Dispositivo.Seeder.php y creamos la seed. Ejemplo:

public function run(): void
{
    Dispositivo::factory()->count(20)->create();
}

Las factorias se pueden usar en cualquier lugar donde necesites crear un objeto, como en un test.
Además, se le puede especificar algun atributo manualmente y sobrescribirá al que estaba por defecto en la factoria.
$desarrollador1 = Desarrollador::factory()->create(['nombre' =>'Sony']);

Tambien se puede crear algo manual sin necesidad de factorias. Importante el use Illuminate\Support\Facades\DB; Ejemplo:

public function run(): void
{
    DB::table('aulas')->insert([
        'codigo' => 'IF0',
        'nombre' => 'Informática',
    ]);
}

Nos vamos a DatabaseSeeder.php y indicamos el orden de todos los seeders. Ejemplo:

public function run(): void
{
    $this->call([
        AulaSeeder::class,
        OrdenadorSeeder::class,
        DispositivoSeeder::class,
    ]);
}

Por ultimo, ejecutamos: php artisan db:seed
Si queremos reiniciar todo, mejor esto: php artisan migrate:fresh --seed

Podemos cambiar a español el fake. Para ello:
En app.php cambiamos esta linea: 'faker_locale' => env('APP_FAKER_LOCALE', 'es_ES'),
En .env cambiamos esta linea: APP_FAKER_LOCALE=es_ES

Comando para crear un Seeder:
php artisan make:seeder GeneroableSeeder


-------------------------------PAGINACION------------------------------------------------

Cuando retornemos una vista desde web.php o un controlador:

    return view('ordenadores.index', [
        'ordenadores' => Ordenador::paginate(10),
    ]);


En la vista blade tenemos que añadir abajo:

    <div class="mt-4">
        {{ $ordenadores->links() }}
    </div>

---------------------------------GATES-------------------------------------------------------

En AppServiceProvider.php creamos la gate. La funcion siempre debe devolver true o false. Aquí unos ejemplos:

        Gate::define('update-valoracion', function (User $user, Valoracion $valoracion) {
            return $user->id === $valoracion->user->id;
        });

        Gate::define('anyadir-genero', function (User $user) {
            return $user->name == 'Admin';
        });

        Gate::define('pelicula-valorada', function (User $user, Pelicula $pelicula) {
            return Valoracion::where('user_id', $user->id)
            ->where('valorable_id', $pelicula->id)
            ->where('valorable_type', Pelicula::class)
            ->exists();
        });

El user siempre se inyecta. Pero además puede requerir otro modelo.

Luego nos vamos al controlador (o al web.php) y dentro de la funcion en la que queramos aplicar la gate, añadimos al principio la condición.
Normalmente se usa la negacion (!), ya que se trata de NO PERMITIR. Aquí unos ejemplos:
        if (! Gate::allows('anyadir-genero')) {
            abort(403);
        }

Aqui no se usa negación (!) porque la logica es si existe un videojuego valorado, entonces no se permite.
        if (Gate::allows('videojuego-valorado', $videojuego)) {
            abort(403);
        }

Si queremos que aparezca/no aparezca el <div> que se encarga de esa acción en la plantilla blade, utilizamos:
@can('anyadir-genero') y @endcan   (En este caso no se necesita inyectar nada, el usuario ya se inyecta por defecto)
@cannot('videojuego-valorado', $videojuego) y @endcannot (En este caso la gate necesita que se inyecte el videojuego)

----------------------------------SOFT DELETE-----------------------------------------------------------------------

Creamos una migracion para incluir la columna deleted_at:
php artisan make:migration --table=peliculas add_peliculas_deleted_at_column

En el método up incluimos:   $table->softDeletes();
En el método down incluimos: $table->dropSoftDeletes();

En la clase Pelicula incluimos: use SoftDeletes;

Ahora cuando se utilice el método delete() presente en el controlador, se hará un softdelete automaticamente.

Si queremos consultar con eloquent todas las filas incluidas las eliminadas: Pelicula::withTrashed()->get()
Si queremos consultar con eloquent solo las peliculas eliminadas: Pelicula::onlyTrashed()->get()

Para restaurar una pelicula eliminada utilizamos el método restore(). Pero hay que tener cuidado,
ya que si recibimos desde una petición la pelicula, laravel no inyectará la pelicula eliminada, tan solo tendremos su id.
    public function restaurar($id)
    {
        $pelicula = Pelicula::onlyTrashed()->find($id);
        $pelicula->restore();

        session()->flash('exito', 'Pelicula restaurada.');
        return redirect()->route('peliculas.show', $pelicula);
    }


-------------------------------------TEST--------------------------------------------------------------------------------
Crear el .env.testing y dentro cambiar los parámetros
APP_ENV=testing
DB_DATABASE=noseké_testing (esto implica crear una nueva base de datos)
El usuario puede seguir siendo el mismo.

Crear el archivo de test:
php artisan make:test VideojuegoTest

Dentro de tests/Feature/VideoJuegoTest.php implementar los diferentes tests (Ejemplos en schuman94/filmaffinity_1)
Por si acaso necesitas consultar las rutas para el post, put o lo que sea: php artisan route:list
Tener en cuenta que en cada test individual la base de datos se reinicia, es decir, las filas creadas se borran.
Pero cuidado porque eso no significa que los id se reinicien, si se crea otra fila, tendrá el id siguiente id que toque.

Ejecutar los tests:
php artisan test --env=testing (Esto ultimo no es necesario si se ha creado el .env.testing)


-----------------------------------CORREO---------------------------------------------------------------------------------
En el mail.php tenemos la configuracion, pero ya viene bien por defecto.
Configurar el archivo .env:
    MAIL_MAILER=smtp
    MAIL_SCHEME=null
    MAIL_HOST=127.0.0.1
    MAIL_PORT=1025
    MAIL_USERNAME=examen
    MAIL_PASSWORD=examen
    MAIL_ENCRYPTION=null
    MAIL_FROM_ADDRESS="examen@examen.com"
    MAIL_FROM_NAME="${APP_NAME}"

Descargamos el Mailpit: sudo bash < <(curl -sL https://raw.githubusercontent.com/axllent/mailpit/develop/install.sh)
Para arrancarlo, ejecutamos en una terminal: mailpit
Podemos acceder desde: http://127.0.0.1:8025/ (si falla, reinicia el servidor composer)

Creación de los archivos:
    opcion html:        php artisan make:mail PeliculaValorada
    opcion markdown:    php artisan make:mail PeliculaValoradaMd --markdown=emails.pelicula-valorada-md (Vamos a usar esta)

Se crean los archivos: app/Mail/PeliculaValoradaMd.php y resources/views/emails/pelicula-valorada-md.blade.php

Nos vamos al lugar donde queremos que se ejecute la accion de enviar el correo (un controlador o en web.php) y escribimos lo siguiente:
Mail::to(Auth::user()->email)->send(new PeliculaValoradaMd($valoracion, $pelicula));
en to() se indica el mail del destinatario.
en send() se indica una nueva instancia del mailable. Se le pueden pasar parámetros.

Importante los use:
use Illuminate\Support\Facades\Mail;
use App\Mail\PeliculaValoradaMd;

En el caso de que hayamos pasado parámetros al constructor del mailable, debemos implementarlo en el PeliculaValoradaMd.php:

class PeliculaValoradaMd extends Mailable
{
    public $valoracion;
    public $pelicula;

    public function __construct(Valoracion $valoracion, Pelicula $pelicula)
    {
        $this->valoracion = $valoracion;
        $this->pelicula = $pelicula;
    }

Por ultimo, escribimos el contenido en pelicula-valorada-md.blade.php:
    Has realizado una valoración de la película: {{$pelicula->titulo}}.
    Puntuación: {{$valoracion->puntuacion}}

---------------------LIVEWIRE MANUAL--------------------------------------------------------
Para instalarlo manualmente: composer require livewire/livewire

Luego creamos un componente con: php artisan make:livewire ValoracionesPelicula
Este comando nos crea dos archivos:
    app/Livewire/ValoracionesPelicula.php -> Controla la lógica
    resources/views/livewire/valoraciones-pelicula.blade.php -> es la vista que se renderiza

Para añadir esa vista en algun lugar, hay que añadir:
@livewire('valoraciones-pelicula', ['pelicula' => $pelicula])
(se le indica el nombre de la vista que queremos renderizar, y en un array se le pasan los parametros necesarios)

Los parámetros se recogen en ValoracionesPelicula.php:
    class ValoracionesPelicula extends Component
    {
        public $pelicula;  // Es necesario crear el atributo en la clase.

        public function mount(Pelicula $pelicula) // Con esta función se almacena en el atributo el parámetro recogido
        {
            $this->pelicula = $pelicula;
        }

        public function eliminar()  // Las funciones ya no necesitan parámetros, ya que se usa el atributo de la clase.
        {
            $this->pelicula->valoraciones()->delete();
        }

        public function render() // Retornamos la vista, pasándole algun parametro si es necesario.
        {
            return view('livewire.valoraciones-pelicula', [
                'pelicula' => $this->pelicula->fresh()  // Con el fresh() se hace un refresco en el modelo, para aplicar los cambios.
            ]);
        }
    }

OTRA OPCION
Si lo que queremos es acceder a una vista de Livewire desde una ruta:
php artisan make:livewire counter (Se crean los dos archivos correspondientes)

Y en el web.php añadimos:
    use App\Livewire\Counter;
    Route::get('/counter', Counter::class);

Para acceder a esa vista desde http://127.0.0.1:8000/counter hay que crear un layout desde el que se renderiza:
php artisan livewire:layout
Esto nos crea el fichero: resources/views/components/layouts/app.blade.php
Y gracias a ese fichero se podrá renderizar cualquier vista livewire indicada en el web.php

----------------------LIVEWIRE USANDO BREEZE--------------------------------------------------
Primero instalamos el Breeze:
    composer require laravel/breeze --dev
    php artisan breeze:install (Aquí hay que elegir la segunda opción: Livewire (Volt Class API) with Alpine)

Creamos el layout para livewire:
php artisan livewire:layout
Esto genera el archivo resources/views/components/layouts/app.blade.php

Creamos el componente de livewire asociado a un modelo:
    php artisan make:livewire counter LibroIndex

En app/Livewire/LibroIndex.php implementamos la logica como si fuese un controlador

Lo añadimos como ruta en el web.php:
    Route::get('/libros', LibroIndex::class)->name('libros.index');

En resources/views/livewire/libro-index.blade.php rellenamos la vista.
